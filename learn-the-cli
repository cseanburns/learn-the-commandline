#!/usr/bin/env bash
#
# Copyright 2022 Sean Burns
#
# Date: 2022-11-25
#
# Author: Sean Burns <sean.csb@gmail.com>
#
# This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# A script to practice basic shell commands / utilities
#

introduction() {

  clear

  printf "
  Welcome to Learn the Commandline.

  This program lets you to practice and learn the
  commandline.

  I will present to you a series of commands and tell you
  what each does. Your job is to use this program to learn
  about them and practice using them. Keep using this
  program over and over until using these commands become
  second nature.

  The commands we will cover here include:

  list files and directories.................. ls
  print name of current/working directory..... pwd
  create a new directory...................... mkdir
  remove or delete an empty directory......... rmdir
  change directory............................ cd
  create an empty file........................ touch
  print characters to output.................. echo
  display contents of a text file............. cat
  copy a file or directory.................... cp
  move or rename a file or directory.......... mv
  remove or delete a file or directory........ rm

  Instructions: when asked to run a command, type the
  command and then press the 'Enter' key to run the command.
  If you make a mistake, this program will let you try
  again.

  To exit this program before completion, press the key
  combo 'Ctrl-c' (that is, the control key plus the 'c'
  key).\n"

}

###### The 'ls' command ######

lsintro() {
  printf "
  ##### The 'ls' command #####

  Let us get started with the command to list files and
  directories:

  ls\n\n"

  printf "Try running the 'ls' command now:\n\n"
}

lsexec() {
  read -rp "$ " lsinput
  if [ "${lsinput}" = "ls" ] ; then
    cd "$HOME" && eval "${lsinput}"
  else
    echo "Try again."
    lsexec
  fi
}

lssummary() {
  sleep 1
  printf "
  The 'ls' command listed the files and directories in your
  working directory. The working directory is your current
  directory. In a graphical user environment, we would say
  it's the folder that you have opened. When you log in to a
  Linux or Unix system, your working directory is usually
  your home directory. On many Linux distributions, your
  home directory is in '/home', but that might differ on
  macOS (a Unix OS) or other Unix-like operating systems.\n"
}

###### The 'pwd' command ######

pwdintro() {
  printf "
  ##### The 'pwd' command #####

  You can always ask for your working directory by using the
  'pwd' command, which stands for 'print working
  directory'.\n

  Try running the 'pwd' command now:\n\n"
}

pwdexec() {
  read -rp "$ " pwdinput
  if [ "${pwdinput}" = "pwd" ] ; then
    cd "$HOME" && eval "${pwdinput}"
  else
    echo "Try again."
    pwdexec
  fi
}

pwdsummary() {
  sleep 1
  printf "
  The 'pwd' command listed your working directory. When you
  first log in to this system, the default location of your
  working directory is your home directory. All home
  directories on this system are named after your username
  and are located in the /home parent directory. Thus, they
  look like /home/USER, where USER is your username.\n"

}

###### The 'mkdir' command ######

mkdirintro() {
  printf "
  ##### The 'mkdir' command #####

  We have learned how to list the current files and
  directories in our working directory using 'ls' and how to
  check which directory we are in using the 'pwd' command.
  We also want the ability to create new directories, which
  are also called folders. We create new directories with
  the 'mkdir' command, which stands for 'make directory'.

  Unlike the 'ls' and the 'pwd' commands above, the 'mkdir'
  command requires an argument or input. The argument is the
  name of the directory that we want to create. For example,
  if we want to create a directory named 'homework' in our
  working directory, then we use the 'mkdir' command with
  the input 'homework' to create that directory.

  Please note that the names of files and directories on
  Linux are case-sensitive. That means that a directory
  called 'homework' is different than a directory called
  'Homework' or a directory called 'HOMEWORK'.

  Try running the 'mkdir' command now to create a directory
  called 'homework':

  mkdir homework\n\n"
}

mkdirexec() {
  read -rp "$ " mkdirinput
  if [ "${mkdirinput}" = "mkdir homework" ] ; then
    cd "$HOME" && eval "${mkdirinput}"
  else
    echo "Try again."
    mkdirexec
  fi
}

mkdirsummary() {
  sleep 1
  printf "

  The 'mkdir' command created a new directory called
  'homework' in your working directory. If your working
  directory is your home directory, then the location of the
  new 'homework' directory is '/home/USER/homework'. We
  can check what directory we are with the 'pwd' command and
  confirm the directory was created with the 'ls' command:

  Try the 'pwd' command first to confirm your working
  directory:\n"

  pwdexec
  sleep 1

  printf "
  Now try the 'ls' command to confirm that the directory
  called 'homework' is listed:\n"

  lsexec
  sleep 1

  printf "
  Very good! So far you have learned how to use three
  commands: 'ls', 'pwd', and 'mkdir'.

  You can create other directories with other names just by
  using different arguments or input for the 'mkdir'
  command.

  In addition to the case-sensitive issue, files and
  documents should not contain special characters, like
  spaces or those characters listed on your keyboard above
  your numbers. Names of files and folders should be one
  string of text. If they include multiple words, then
  separate the words with a dash, an underscore, or use
  camel casing, like so: my-files, my_files, or myFiles.\n"

}

###### The 'cd' command ######

cdintro() {
  printf "
  ##### The 'cd' command #####

  The 'cd' command allows us to change to a different
  directory. Unlike the 'mkdir' command, it does not require
  an argument or input, but we often add input to specify
  which directory we would like to go into (or which folder
  we would like to open). The 'cd' command stands for
  'change directory'.

  Try running the 'cd' command now to change into the new
  'homework' directory:

  cd homework\n\n"
}

cdexec() {
  read -rp "$ " cdinput
  if [ "${cdinput}" = "cd homework" ] ; then
    eval "${cdinput}"
  else
    echo "Try again."
    cdexec
  fi
}

cdhomework() {
  printf "
  The 'cd' command opened your new 'homework' directory. If
  you use the 'pwd' command, you will see that that your
  location has changed to '/home/USER/homework'. Try that
  now:\n"

  (cd "$HOME"/homework && pwdexec)
  sleep 1
}

cdhome() {
  printf "
  Now let's return to (or open) your home folder. Here is
  where the 'cd' command does not require an argument or
  input. That is, if you type 'cd' by itself, it'll take you
  home.

  Try typing 'cd' by itself now:\n\n"
  sleep 1

  read -rp "$ " cdhome
  if [ "${cdhome}" = "cd" ] ; then
    eval "${cdhome}"
  else
    echo "Try again."
    cdhome
  fi

  printf "
  Again, use the 'pwd' command to confirm that you are in
  your home directory, which is '/home/USER':\n\n"

  pwdexec
}

cdsummary() {
  sleep 1
  printf "
  Very good! Now you have learned four commands:
  'ls', 'pwd', 'mkdir', and 'cd'.

  The 'cd' command with an argument or input changed your
  working directory to the one specified in the argument or
  input (if that directory exists). Without an argument or
  input, the 'cd' command by itself returned you to your
  home directory, which is /home/USER. We confirmed that
  above with the 'pwd' command.\n\n"

}

###### The 'rmdir' command ######

rmdirintro() {
  printf "
  ##### The 'rmdir' command #####

  In the prior section, you learned how to create a new
  directory called 'homework'. To remove that directory, we
  use the 'rmdir' command. The 'rmdir' command will only
  remove empty directories. If a directory has other
  directories or files in it, then we will have to use
  another command. More on that later.

  Like the 'mkdir' command, the 'rmdir' command requires an
  argument or input. The argument is the name of the
  directory that we want to remove. For example, if we want
  to remove the empty directory named 'homework' in our
  working directory, then we use the 'rmdir' command like
  so:

  rmdir homework 

  Try running the 'rmdir' command now to remove the directory
  called 'homework':\n\n"
}

rmdirexec() {
  read -rp "$ " rmdirinput
  if [ "${rmdirinput}" = "rmdir homework" ] ; then
    eval "${rmdirinput}"
  else
    echo "Try again."
    rmdirexec
  fi
}

rmdirsummary() {
  sleep 1
  printf "

  The 'rmdir' command removed the empty directory called
  'homework' in your working directory. We can check that
  with the 'ls' command.

  Try the 'ls' command to confirm that the directory called
  'homework' is no longer listed:\n\n"

  lsexec
  sleep 1

  printf "
  Very good! Now you have learned five commands:
  'ls', 'pwd', 'mkdir', 'cd', and 'rmdir'.\n\n"

}

###### The 'touch' command ######

touchintro() {
  printf "
  ##### The 'touch' command #####

  The 'touch' command is technically used to change a file's
  access and modification timestamp. However, it has this
  nice side effect of creating a new, empty file when its
  input is a new file name. The following 'touch' command
  with 'data.csv' as an argument creates an empty file
  called 'data.csv'.

  touch data.csv\n\n"

  printf "Try running the above 'touch' command now:\n\n"
}

touchexec() {
  read -rp "$ " touchinput
  if [ "${touchinput}" = "touch data.csv" ] ; then
    eval "${touchinput}"
  else
    echo "Try again."
    touchexec
  fi

  printf "
  Now use the 'ls' command to check that the file now
  exists.\n"

  lsexec
}

touchsummary() {
  sleep 1
  printf "
  Very good! Now you have learned six commands: 'ls', 'pwd',
  'mkdir', 'cd', 'rmdir', and 'touch'.

  The 'touch' command can be used to create new empty files.
  This command is useful in certain scripting scenarios.
  \n\n"

}

###### The 'echo' command ######

echointro() {
  printf "
  ##### The 'echo' command #####

  The 'echo' command displays a line of text, or prints text
  to standard output. It's a simple command and is useful in
  a variety of contexts. To display the line 'hello world', we
  use the 'echo' command like this:

  echo \"hello world\"\n\n"

  printf "Try running the above 'echo' command now:\n\n"
}

echoexec() {
  read -rp "$ " echoinput
  if [ "${echoinput}" = 'echo "hello world"' ] ; then
    eval "${echoinput}"
  else
    echo "Try again."
    echoexec
  fi
}

echoredirectinfo() {
  sleep 1
  printf "
  The 'echo' command prints to standard output, which by
  default is your screen. However, we can use 'redirection'
  to send the output to a file, like the 'data.csv' file we
  created earlier with the 'touch' command. The redirect
  command is the angle bracket '>'. To print input to the
  file 'data.csv', we use the 'echo' like so:

  echo \"hello world\" > data.csv

  Now you try it:\n"
}

echoredirect() {
  read -rp "$ " echofile
  if [ "${echofile}" = 'echo "hello world" > data.csv' ] ; then
    eval "${echofile}"
  else
    echo "Try again."
    echoredirect
  fi
}

echosummary() {
  sleep 1
  printf "
  Very good! Now you have learned seven commands: 'ls',
  'pwd', 'mkdir', 'cd', 'rmdir', 'touch', and 'echo'.

  The 'echo' command can be used to create text. It is
  useful in scripts to report the status of some command.
  Using the redirect command '>', output can be sent to a
  file.\n\n"
}

###### The 'cat' command' ######

catintro() {
  printf "

  ##### The 'cat' command #####

  The 'cat' command performs a couple of useful functions.
  Specifically, it 1) displays the contents of a file, and
  2) concatenates multiple files. Like the 'mkdir', 'rmdir',
  'echo', and other commands, the 'cat' command requires an
  argument or input. The input is usually at least one file
  name. If the input is more than one file name, the 'cat'
  command will display the contents of all the files. With
  redirection, the 'cat' command can be used to redirect the
  output of multiple files into a new file, thereby
  appending, or 'concatenating', files together.

  For example, to 'cat' a single file, the command is:

  cat data.csv

  Try running the above 'cat' command now:\n\n"
}

catexec() {
  read -rp "$ " catinput
  if [ "${catinput}" = "cat data.csv" ] ; then
    eval "${catinput}"
  else
    echo "Try again."
    catexec
  fi
}

catsummary() {
  sleep 1
  printf "
  The 'cat' command displayed the content of the 'data.csv'
  file. We could also use redirection, like we did with the
  'echo' command, to redirect the output of multiple files
  into a single file. For example, the command:

  cat file1.txt file2.txt > file3.txt

  would output the contents of file1.txt and file2.txt into
  file3.txt. If file3.txt did not exist, it would be
  created.

  Very good! Now you have learned eight commands: 'ls',
  'pwd', 'mkdir', 'cd', 'rmdir', 'touch', 'echo', and
  'cat'.\n\n"
}

###### The 'cp' command ######

cpintro() {
  printf "
  ##### The 'cp' command #####

  The 'cp' command copies files and directories. It
  generally takes two arguments, or two inputs: the name of
  the file or directory to copy and the name of the copy.
  For example, to copy the 'data.csv' file to a file named
  'data.csv.bak', the command is:

  cp data.csv data.csv.bak

  Thus, the first argument is the name of the original file
  and the second argument is the name of the copy.

  Now try the above 'cp' command:\n"
}

cpexec() {
  read -rp "$ " cpinput
  if [ "${cpinput}" = "cp data.csv data.csv.bak" ] ; then
    eval "${cpinput}"
  else
    echo "Try again."
    cpexec
  fi
}

cpsummary() {
  sleep 1
  printf "
  You can check if the copy was successful with the 'ls'
  command. Give it a try:\n"

  lsexec
  sleep 1

  printf "
  Very good! Now you have learned nine commands: 'ls',
  'pwd', 'mkdir', 'cd', 'rmdir', 'touch', 'echo', 'cat', and
  'cp'.

  Note that the new copy can be used to rename the file
  while keeping the original file in place. There is also a
  command that will rename or move a file. We cover that
  next.\n\n"

}

###### The 'mv' command ######

mvintro() {
  printf "
  ##### The 'mv' command #####

  The 'mv' command moves files and directories. Moving is
  another way of renaming files or directories. Like the
  'cp' command, it generally takes two arguments, or two
  inputs: the name of the file or directory to move or
  rename and the new name or location of the file. Unlike
  the 'cp' command, the original file will no longer exist.
  The renamed file will take its place. For example, to move
  or rename the 'data.csv' file to a file named 'data.old',
  the command is:

  mv data.csv data.old

  Thus, the first argument is the name of the original file
  and the second argument is the new name of the same
  file.

  Now try the above command:\n"
}

mvexec() {
  read -rp "$ " mvinput
  if [ "${mvinput}" = "mv data.csv data.old" ] ; then
    eval "${mvinput}"
  else
    echo "Try again."
    mvexec
  fi
}

mvsummary() {
  sleep 1
  printf "
  You can check if the 'mv' command worked with the 'ls'
  command. Give it a try:\n"

  lsexec
  sleep 1

  printf "
  Very good! Now you have learned ten commands: 'ls', 'pwd',
  'mkdir', 'cd', 'rmdir', 'touch', 'echo', 'cat', 'cp', and
  'mv'.

  Unlike the 'cp' command, the 'mv' command does not keep a
  copy of the original file.\n\n"

}

###### The 'rm' command ######

rmintro() {
  printf "
  ##### The 'rm' command #####

  The 'rm' command, short for remove, deletes files and
  directories. You will remember that the 'rmdir' command
  deletes empty directories. We need the 'rm' command to
  delete directories that contain files and sub-directories.
  The 'rm' command does not provide a trash bin for
  recovering deleted files. Once something is deleted with
  'rm', consider it gone for good.

  The 'rm' command also takes arguments or input. It can
  even take multiple arguments. Try running the 'rm' command
  to delete the data.csv.bak and the data.old files we just
  created:\n

  rm data.csv.bak data.old\n\n"

}

rmexec() {
  read -rp "$ " rminput
  if [ "${rminput}" = "rm data.csv.bak data.old" ] ; then
    eval "${rminput}"
  else
    echo "Try again."
    rmexec
  fi
} 

rmsummary() {
  sleep 1
  printf "
  You can check if the 'rm' command worked with the 'ls'
  command. Give it a try:\n"

  lsexec
  sleep 1

  printf "
  Remember, you should assume that the 'rm' command
  permanently deletes files and directories.\n\n"
}

conclusion() {
  sleep 1
  printf "

  Well done!

  You have completed this lesson in learning the
  commandline. The eleven commands that you learned include:

  list files and directories.................. ls
  print name of current/working directory..... pwd
  create a new directory...................... mkdir
  remove or delete an empty directory......... rmdir
  change directory............................ cd
  create an empty file........................ touch
  print characters to output.................. echo
  display contents of a text file............. cat
  copy a file or directory.................... cp
  move or rename a file or directory.......... mv
  remove or delete a file or directory........ rm\n

  Each of the above commands have functionality that can be
  extended with the use of 'options'. Options are generally
  composed of a dash and a single letter representing the
  option's function. For example, the 'rm' command includes
  the option '-r', which stands for 'recursive'. We use the
  '-r' option to delete directories with content, like so:

  rm -r a_directory\n\n"

  read -rp "Press enter to continue"
  clear

  printf "
  All of the above commands have a how-to manual. Some of
  these manuals are quite extensive, but they all offer
  instructions in how to use the commands. Except for the
  'cd' command, to read the manual pages for the commands,
  type 'man' and the name of the command. For example, to
  read the manual for the 'cp' command, type:

  man cp

  Use the arrow keys on your keyboard to scroll through the
  manual pages. Press the letter 'q' to exit the manual
  pages.

  The 'cd' command is a special builtin command. That is,
  it's part of the Bash shell. To read the manual for the
  'cd' command, type:

  help cd

  There are more commands to learn, but once you
  have practiced these, the rest will come easy.

  Run this program over and over again until you get the
  hang of what the commands do and have acquired a good
  understanding of them.\n"

}

proceed() {
  printf "\n"
  read -rp "Press enter to continue."
  clear
}

cleanup() {
  if [ -d "$HOME"/homework ] ; then
    rmdir "$HOME"/homework
  fi

  if [ -a "$HOME"/data.csv ] ; then
    rm "$HOME"/data.csv
  fi

  if [ -a "$HOME"/data.csv.bak ] ; then
    rm "$HOME"/data.csv.bak
  fi

  if [ -a "$HOME"/data.old ] ; then
    rm "$HOME"/data.old
  fi
}
trap cleanup EXIT

main() {
  introduction

  proceed

  lsintro
  lsexec
  lssummary

  proceed

  pwdintro
  pwdexec
  pwdsummary

  proceed

  mkdirintro
  mkdirexec
  mkdirsummary

  proceed

  cdintro
  cdexec
  cdhomework
  cdhome
  cdsummary

  proceed

  rmdirintro
  rmdirexec
  rmdirsummary

  proceed

  touchintro
  touchexec
  touchsummary

  proceed

  echointro
  echoexec
  echoredirectinfo
  echoredirect
  echosummary

  proceed

  catintro
  catexec
  catsummary

  proceed

  cpintro
  cpexec
  cpsummary

  proceed

  mvintro
  mvexec
  mvsummary

  proceed

  rmintro
  rmexec
  rmsummary

  proceed

  conclusion
}

main
